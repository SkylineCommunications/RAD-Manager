name: RAD CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: 
      - 'main'
  pull_request:
    branches: 
      - '**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  unit_tests:
    name: Unit Tests
    needs: nuget_validation
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2.0.0

      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1.3
      
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2.0.1

      - name: Restore NuGet cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: |
          nuget sources add -name github -source "https://nuget.pkg.github.com/SkylineCommunications/index.json" -username USERNAME -password ${{ secrets.GITHUB_TOKEN }} 
          nuget restore "RAD Manager.sln"
      
      - name: Build Solution
        run: msbuild "RAD Manager.sln" /p:Configuration=Release /verbosity:quiet /clp:"Summary;ErrorsOnly;ForceConsoleColor" /p:WarningLevel=0 /p:RunCodeAnalysis=false /maxcpucount

      - name: Install Playwright.NET
        uses: phil-scott-78/setup-playwright-dotnet@v0.1.0-alpha
        with:
          dotnet-version: 8.0.x
          with-deps: true
          browsers: 'chromium firefox'
          install-powershell: true
          
      - name: Ensure browsers are installed
        run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps

      - name: Run Unit Tests
        shell: pwsh
        run: |
          $TestDlls = Get-ChildItem -Filter "*Test*.dll" -Recurse -File `
            | Where-Object { $_.FullName -match '\\bin\\Release\\' -and $_.Name -notmatch 'Microsoft' } `
            | Select-Object -ExpandProperty FullName
          Write-Host $TestDlls
          & vstest.console.exe $TestDlls /Logger:TRX /Parallel

  nuget_validation:
    name: Validate NuGets
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Install dotnet-consolidate
        run: dotnet tool install -g dotnet-consolidate

      - name: Run dotnet consolidate
        run: dotnet consolidate -s "RAD Manager.sln"
        
  CI:
    needs: [nuget_validation, unit_tests]
    uses: SkylineCommunications/_ReusableWorkflows/.github/workflows/DataMiner App Packages Master Workflow.yml@main
    with:
      configuration: Release
      referenceName: ${{ github.ref_name }}
      runNumber: ${{ github.run_number }}
      referenceType: ${{ github.ref_type }}
      repository: ${{ github.repository }}
      owner: ${{ github.repository_owner }}
      sonarCloudProjectName: ${{ vars.SONAR_NAME }} # Go to 'https://sonarcloud.io/projects/create' and create a project. Then create a SONAR_NAME variable with the ID of the project as mentioned in the SonarCloud project URL.
      # solutionFilterName: "MySolutionFilter.slnf"
    secrets:
      dataminerToken: ${{ secrets.DATAMINER_TOKEN }} # The API key: generated in the DCP Admin app (https://admin.dataminer.services/) as authentication for a certain DataMiner System.
      sonarCloudToken: ${{ secrets.SONAR_TOKEN }} # The API key for access to SonarCloud.